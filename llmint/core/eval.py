class pcolors:
    RIGHT = '\033[92m'
    WRONG = '\033[91m'
    MISSING = '\033[33m'
    ENDC = '\033[0m'


# accuracy measured by # of correct mappings / total mappings
def accuracy(results, example_num, example_mappings):
    """
    Compares model's results with ground truth mappings and prints recall/precision 
    measurements for accuracy. The model's results are printed in color, where green
    means correct, red means the model's generated mapping is incorrect, yellow means
    the ground truth mapping was not identified by the model.

    Args:
        results (list): list of mappings generated by the model
        example_num (int): index of which ground truth mapping in example_mappings
                           should be compared against
        example_mappings (list): list of ground truth mappings
    """
    correct = False
    correctIdxs = []
    numCorrect = 0
    total = 0
    print("Generated Mappings:", flush=True)
    for result, reasoning in results:
        for i in range(len(example_mappings[example_num]["mapping"])):
            if result == str(example_mappings[example_num]["mapping"][i]).replace("'", ""):
                print(pcolors.RIGHT + result + pcolors.ENDC + '\n', reasoning, flush=True)
                numCorrect += 1
                correctIdxs.append(i)
                correct = True
        if not correct:
            print(pcolors.WRONG + result + pcolors.ENDC + '\n', reasoning, flush=True)
        correct = False
        total += 1
    print("Ground Truth Mappings:", flush=True)
    for i in range(len(example_mappings[example_num]["mapping"])):
        if i in correctIdxs:
            print(pcolors.RIGHT + str(example_mappings[example_num]["mapping"][i]).replace("'", "") + pcolors.ENDC,
                  flush=True)
        else:
            print(pcolors.MISSING + str(example_mappings[example_num]["mapping"][i]).replace("'", "") + pcolors.ENDC,
                  flush=True)

    precision = len(correctIdxs) / len(results)
    recall = len(correctIdxs) / len(example_mappings[example_num]["mapping"])
    f1 = 2 * ((precision * recall) / (precision + recall))

    print("Precision: ", precision, flush=True)
    print("Recall: ", recall, flush=True)
    print("F1: ", f1, flush=True)
    print("Total: ", numCorrect, "/", total, flush=True)
    return precision, recall, f1


def print_mappings(mappings: dict, include_reasoning=True):
    for name, response in mappings.items():
        mapping, reasoning = response
        if include_reasoning:

            print(pcolors.RIGHT + mapping + pcolors.ENDC + '\n',
                  reasoning, flush=True)
        else:
            print(pcolors.RIGHT + mapping + pcolors.ENDC,
                  flush=True)
